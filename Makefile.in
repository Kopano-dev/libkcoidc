PACKAGE  = stash.kopano.io/kc/libkcoidc
PACKAGE_NAME = $(shell basename $(PACKAGE))

# Autoconf

prefix ?= @prefix@
exec_prefix ?= @exec_prefix@
libdir ?= @libdir@
includedir ?= @includedir@

# Tools

GO      ?= @GO@
GOFMT   ?= @GOFMT@
GLIDE   ?= @GLIDE@
GOLINT  ?= @GOLINT@

GO2XUNIT ?= @GO2XUNIT@

DST_BIN  ?= ./bin
DST_LIBS ?= ./.libs
CC       ?= @CC@
CXX      ?= @CXX@
CFLAGS   ?= -I$(DST_LIBS)

PYTHON ?= @PYTHON@

# Cgo
CGO_ENABLED ?= 0

# Library
SHAREDLIB=libkcoidc.so
SHAREDLIBV=libkcoidc.so.0

# Variables
PWD     := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))
DATE    ?= $(shell date -u +"%Y-%m-%dT%H:%M:%SZ")
VERSION ?= $(shell git describe --tags --always --dirty --match=v* 2>/dev/null | sed 's/^v//' || \
			cat $(CURDIR)/.version 2> /dev/null || echo 0.0.0-unreleased)
GOPATH   = $(CURDIR)/.gopath
BASE     = $(GOPATH)/src/$(PACKAGE)
PKGS     = $(or $(PKG),$(shell cd $(BASE) && env GOPATH=$(GOPATH) $(GO) list ./... | grep -v "^$(PACKAGE)/vendor/"))
TESTPKGS = $(shell env GOPATH=$(GOPATH) $(GO) list -f '{{ if or .TestGoFiles .XTestGoFiles }}{{ .ImportPath }}{{ end }}' $(PKGS) 2>/dev/null)
CMDS     = $(or $(CMD),$(addprefix cmd/,$(notdir $(shell find "$(PWD)/cmd/" -type d))))
LIBS     = $(or $(CMD),$(addprefix lib/,$(notdir $(shell find "$(PWD)/lib/" -type d))))
CAPIVER := 0
CDEPS    = $(addprefix $(DST_LIBS)/,$(addsuffix .h,$(notdir $(LIBS))))
CLIBS    = $(addprefix $(DST_LIBS)/lib,$(addsuffix .so.$(CAPIVER),$(notdir $(LIBS))))
TIMEOUT  = 30

export GOPATH CGO_ENABLED

# Build

.PHONY: default
default: lib

.PHONY: all
all: lib python

$(BASE): ; $(info creating local GOPATH ...)
	@mkdir -p $(dir $@)
	@ln -sf $(CURDIR) $@

$(DST_BIN):
	@mkdir $@

$(DST_LIBS):
	@mkdir $@

.PHONY: $(CMDS)
$(CMDS): vendor | $(BASE) ; $(info building $@ ...) @
	cd $(BASE) && CGO_ENABLED=$(CGO_ENABLED) $(GO) build \
		-tags release \
		-asmflags '-trimpath=$(GOPATH)' \
		-gcflags '-trimpath=$(GOPATH)' \
		-ldflags '-s -w -X $(PACKAGE)/version.Version=$(VERSION) -X $(PACKAGE)/version.BuildDate=$(DATE) -extldflags -static' \
		-o bin/$(notdir $@) $(PACKAGE)/$@

.PHONY: $(LIBS)
$(LIBS): vendor | $(BASE) $(DST_BIN) $(DST_LIBS); $(info building C libs $@ ...) @
	cd $(BASE) && CGO_ENABLED=1 $(GO) build \
		-tags release \
		-buildmode=c-shared \
		-asmflags '-trimpath=$(GOPATH)' \
		-gcflags '-trimpath=$(GOPATH)' \
		-ldflags '-s -w -X $(PACKAGE)/version.Version=$(VERSION) -X $(PACKAGE)/version.BuildDate=$(DATE) -linkmode external -extldflags=-Wl,-soname,lib$(notdir $@).so.0' \
		-o $(DST_LIBS)/$(notdir $@).so $(PACKAGE)/$@
	@mv -f $(DST_LIBS)/$(notdir $@).so $(DST_LIBS)/lib$(notdir $@).so.$(CAPIVER)
	cd $(DST_LIBS) && ln -sfn lib$(notdir $@).so.$(CAPIVER) lib$(notdir $@).so

$(CDEPS): $(LIBS)

$(CLIBS): $(CDEPS)

.PHONY: lib
lib: fmt vendor | $(CLIBS)

.PHONY: python
python: $(CDEPS)
	(cd python && $(PYTHON) setup.py build)

# Examples

.PHONY: examples
examples: $(DST_BIN)/validate-c $(DST_BIN)/benchmark-cpp $(CMDS)

$(DST_BIN)/validate-c: examples/validate.c $(CLIBS)
	$(CC) -Wall -std=c11 -o $@ $^ $(CFLAGS)

$(DST_BIN)/benchmark-cpp: examples/benchmark.cpp $(CLIBS)
	$(CXX) -Wall -O3 -std=c++0x -o $@ $^ -pthread $(CFLAGS)

# Helpers

.PHONY: lint
lint: vendor | $(BASE) ; $(info running golint ...)	@
	@cd $(BASE) && ret=0 && for pkg in $(PKGS); do \
		test -z "$$($(GOLINT) $$pkg | tee /dev/stderr)" || ret=1 ; \
	done ; exit $$ret

.PHONY: fmt
fmt: ; $(info running gofmt ...)	@
	@ret=0 && for d in $$($(GO) list -f '{{.Dir}}' ./... | grep -v /vendor/); do \
		$(GOFMT) -l -w $$d/*.go || ret=$$? ; \
	done ; exit $$ret

# Tests

TEST_TARGETS := test-default test-bench test-short test-race test-verbose
.PHONY: $(TEST_TARGETS)
test-bench:   ARGS=-run=_Bench* -test.benchmem -bench=.
test-short:   ARGS=-short
test-race:    ARGS=-race
test-race:    CGO_ENABLED=1
test-verbose: ARGS=-v
$(TEST_TARGETS): NAME=$(MAKECMDGOALS:test-%=%)
$(TEST_TARGETS): test

.PHONY: test
test: vendor | $(BASE) ; $(info running $(NAME:%=% )tests ...)	@
	@cd $(BASE) && CGO_ENABLED=$(CGO_ENABLED) $(GO) test -timeout $(TIMEOUT)s $(ARGS) $(TESTPKGS)

TEST_XML_TARGETS := test-xml-default test-xml-short test-xml-race
.PHONY: $(TEST_XML_TARGETS)
test-xml-short: ARGS=-short
test-xml-race:  ARGS=-race
test-xml-race:  CGO_ENABLED=1
$(TEST_XML_TARGETS): NAME=$(MAKECMDGOALS:test-%=%)
$(TEST_XML_TARGETS): test-xml

.PHONY: test-xml
test-xml: vendor | $(BASE) ; $(info running $(NAME:%=% )tests ...)	@
	@mkdir -p test
	cd $(BASE) && 2>&1 CGO_ENABLED=$(CGO_ENABLED) $(GO) test -timeout $(TIMEOUT)s $(ARGS) -v $(TESTPKGS) | tee test/tests.output
	$(shell test -s test/tests.output && $(GO2XUNIT) -fail -input test/tests.output -output test/tests.xml)

# Glide

glide.lock: glide.yaml | $(BASE) ; $(info updating dependencies ...)
	@cd $(BASE) && $(GLIDE) update
	@touch $@

vendor: glide.lock | $(BASE) ; $(info retrieving dependencies ...)
	@cd $(BASE) && $(GLIDE) --quiet install
	@ln -nsf . vendor/src
	@touch $@

# Dist

.PHONY: licenses
licenses: ; $(info building licenses files ...)
	scripts/go-license-ranger.py > 3rdparty-LICENSES.md

3rdparty-LICENSES.md: licenses

.PHONY: dist
dist: licenses ; $(info building dist tarball ...)
	@mkdir -p "dist/${PACKAGE_NAME}-${VERSION}"
	@cd dist && \
	cp -avf ../LICENSE.txt "${PACKAGE_NAME}-${VERSION}" && \
	cp -avf ../3rdparty-LICENSES.md "${PACKAGE_NAME}-${VERSION}" && \
	cp -avf ../README.md "${PACKAGE_NAME}-${VERSION}" && \
	cp -avf ../.libs/* "${PACKAGE_NAME}-${VERSION}" && \
	chmod 755 "${PACKAGE_NAME}-${VERSION}"/*.so* && \
	rm -f "${PACKAGE_NAME}-${VERSION}"/$(SHAREDLIB) && \
	ln -s $(SHAREDLIBV) "${PACKAGE_NAME}-${VERSION}"/$(SHAREDLIB) && \
	tar --owner=0 --group=0 -czvf ${PACKAGE_NAME}-${VERSION}.tar.gz "${PACKAGE_NAME}-${VERSION}" && \
	cd ..

# Install
.PHONY: install
install: lib ; $(info installing ...)
	@mkdir -p $(DESTDIR)$(libdir)
	@mkdir -p $(DESTDIR)$(includedir)
	cp -f $(CLIBS) $(DESTDIR)$(libdir)
	chmod 755 $(DESTDIR)$(libdir)/$(SHAREDLIBV)
	rm -f $(DESTDIR)$(libdir)/$(SHAREDLIB)
	ln -s $(SHAREDLIBV) $(DESTDIR)$(libdir)/$(SHAREDLIB)
	cp -f $(CDEPS) $(DESTDIR)$(includedir)
	(ldconfig || true) >/dev/null 2>&1

.PHONY: uninstall
uninstall: ; $(info uninstalling ...)
	rm -f $(DESTDIR)$(libdir)/$(notdir $(CLIBS))
	rm -f $(DESTDIR)$(libdir)/$(SHAREDLIB)
	rm -f $(DESTDIR)$(includedir)/$(notdir $(CDEPS))

# Rest

.PHONY: clean
clean: ; $(info cleaning ...)	@
	@rm -f config.* Makefile
	@rm -rf $(GOPATH)
	@rm -rf .libs
	@rm -rf bin
	@rm -rf test/test.*
	(cd python && $(PYTHON) setup.py clean)

.PHONY: version
version:
	@echo $(VERSION)
